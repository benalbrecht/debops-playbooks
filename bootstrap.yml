---

# This playbook can be used to bootstrap freshly installed minimal Debian
# system for Ansible management. The expected state the host:
#   - host is already configured in Ansible inventory/hosts file;
#   - local user has prepared SSH keypair in RSA format;
#   - host has OpenSSH server installed;
#
# Modifications that will be made on the host:
#   - playbook will install Python support with some essential software;
#   - a system 'admins' group will be created for users who have administrator
#     privileges (full sudo permissions);
#   - a normal user account will be created and added to the 'admins' group;
#     If you are connection directly as root, this accoint will be
#     named after your local user account, oterhwise it will be named
#     after the user you are connecting as (option `-u` or
#     ansible_ssh_user from some config- or inventory-file).
#   - no passwords are set or modified on any account;
#   - if set, playbook will configure hostname and domain on the host using
#     'bootstrap_hostname' and 'bootstrap_domain' variables;
#
# Usage:
# To connect directly as root, run:
#
#     debops bootstrap -u root -k --limit host
#
# To connect as normal user and switch to sudo, run:
#
#     debops bootstrap --sudo --limit host


- name: Bootstrap host for Ansible management
  hosts: 'all:!localhost'
  gather_facts: False

  vars:

    # Base packages installed during bootstrap
    bootstrap_base_packages:      [ 'python', 'python-apt', 'python-pip', 'sudo', 'lsb-release' ]

    # Install additional packages during bootstrap
    bootstrap_play_packages:      '{{ bootstrap_packages       | default([]) }}'

    # Default SSH keys to use if none are specified
    bootstrap_play_default_sshkeys: [ '{{ lookup("pipe","ssh-add -L") }}' ]

    # Default administrator variables (sshkeys is a list)
    bootstrap_play_admin_name:    '{{ bootstrap_admin_name     | default(ansible_ssh_user if ansible_ssh_user != "root" else lookup("env","USER")) }}'
    bootstrap_play_admin_group:   '{{ bootstrap_admin_group    | default("admins") }}'
    bootstrap_play_admin_sshkeys: '{{ bootstrap_admin_sshkeys  | default(bootstrap_play_default_sshkeys) }}'

    # Hostname based on Ansible inventory
    bootstrap_play_hostname:      '{{ inventory_hostname_short | default(inventory_hostname) }}'

    # Specify 'bootstrap_domain' in inventory to set a domain

  tasks:
  - name: Install minimal Python support for Ansible
    raw: apt-get --no-install-recommends -yq install python python-apt libcap2-bin

  - name: Install custom Ansible local facts
    copy:
      src: 'files/etc/ansible/facts.d/'
      dest: '/etc/ansible/facts.d/'
      owner: 'root'
      group: 'root'
      mode: '0755'

  - name: Gather host facts
    action: setup

  - name: Make sure essential software is installed
    apt:
      name: '{{ item }}'
      state: 'present'
      install_recommends: False
    with_flattened:
      - bootstrap_base_packages
      - bootstrap_play_packages

  - name: Create admin system group
    group:
      name: '{{ bootstrap_play_admin_group }}'
      state: 'present'
      system: True

  - name: Create administrator account
    user:
      name: '{{ bootstrap_play_admin_name }}'
      state: 'present'
      groups: '{{ bootstrap_play_admin_group }}'
      append: True

  - name: Install ssh public key from current account
    authorized_key:
      user: '{{ bootstrap_play_admin_name }}'
      key: '{{ "\n".join(bootstrap_play_admin_sshkeys) | string }}'
      state: 'present'
    failed_when: (bootstrap_play_admin_sshkeys is undefined or
                  (bootstrap_play_admin_sshkeys is defined and not bootstrap_play_admin_sshkeys))

  - name: Configure admin group access in sudo
    lineinfile:
      dest: '/etc/sudoers.d/{{ bootstrap_play_admin_group }}'
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
      state: 'present'
      create: True
      owner: 'root'
      group: 'root'
      mode: '0440'
      validate: 'visudo -cf %s'
    with_items:
      - regexp: '^Defaults: %{{ bootstrap_play_admin_group }} env_check\s'
        line:    'Defaults: %{{ bootstrap_play_admin_group }} env_check += "SSH_CLIENT"'
      - regexp: '^%{{ bootstrap_play_admin_group }}\s'
        line:    '%{{ bootstrap_play_admin_group }} ALL = (ALL:ALL) NOPASSWD: SETENV: ALL'

  - name: Ensure /etc/sudoers includes /etc/sudoers.d
    lineinfile:
      dest: '/etc/sudoers'
      regexp: '^#includedir\s+/etc/sudoers.d$'
      line: '#includedir /etc/sudoers.d'
      state: 'present'
      validate: 'visudo -cf %s'

  - name: Enforce new hostname
    hostname:
      name: '{{ bootstrap_play_hostname }}'
    when: (ansible_local|d() and ansible_local.cap12s|d() and (not ansible_local.cap12s.enabled or
           (ansible_local.cap12s.enabled and 'cap_sys_admin' in ansible_local.cap12s.list)))

  - name: Save enforced hostname
    copy:
      content: '{{ bootstrap_play_hostname + "\n" }}'
      dest: '/etc/hostname'
      owner: 'root'
      group: 'root'
      mode: '0644'
    when: (ansible_local|d() and ansible_local.cap12s|d() and (not ansible_local.cap12s.enabled or
           (ansible_local.cap12s.enabled and 'cap_sys_admin' in ansible_local.cap12s.list)))

  - name: Ensure domain is defined
    lineinfile:
      state: 'present'
      dest: '/etc/hosts'
      regexp: '{{ "^" + (bootstrap_ipv4 | default("127.0.1.1")) | replace(".","\.") }}'
      line: '{{ (bootstrap_ipv4 | default("127.0.1.1")) + "\t" + (bootstrap_play_hostname | default(ansible_hostname)) + "." + bootstrap_domain + "\t" + (bootstrap_play_hostname | default(ansible_hostname)) }}'
    when: bootstrap_domain is defined and bootstrap_domain

